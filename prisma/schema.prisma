// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuantityMeasure {
  KG
  G
  UNIDADE
  LITRO
}

model User {
  id           String         @id @default(uuid())
  name         String
  cpf          String?        @unique
  email        String         @unique
  dateBirth    String?        @map("date_birth")
  password     String
  phone        String?
  typeUser     Int            @map("type_user")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime?      @updatedAt @map("updated_at")
  lists        List[]
  subscription Subscription[]
  shoppingList ShoppingList[]

  @@map("users")
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  planId    String   @map("plan_id")
  plan      Plan     @relation(fields: [planId], references: [id])
  startDate DateTime @default(now()) @map("start_date")
  endDate   DateTime @map("end_date")
  status    String   @default("inactive")

  @@map("subscriptions")
}

model Plan {
  id           String         @id @default(uuid())
  name         String
  description  String
  price        Decimal        @db.Decimal(9, 2)
  subscription Subscription[]

  @@map("plans")
}

model List {
  id                      String        @id @default(uuid())
  name                    String
  description             String
  budget                  Decimal       @db.Decimal(9, 2)
  dateInitialPurchased    DateTime?     @map("date_initial_purchased")
  dateCompletionPurchased DateTime?     @map("date_completion_purchased")
  totalSpent              Decimal       @map("total_spent") @db.Decimal(9, 2)
  createdAt               DateTime      @default(now()) @map("created_at")
  updatedAt               DateTime?     @updatedAt @map("updated_at")
  userId                  String        @map("user_id")
  user                    User          @relation(fields: [userId], references: [id])
  productList             ProductList[]
  shoppingListId          String?       @map("shooping_list_id")
  shoppingList            ShoppingList? @relation(fields: [shoppingListId], references: [id])

  @@map("lists")
}

model ShoppingList {
  id        String    @id @default(uuid())
  month     Int
  year      Int
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  lists     List[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("shopping_lists")
}

model Product {
  id                String             @id @default(uuid())
  name              String
  description       String
  image             String
  quantity          Int?
  quantityMeasure   QuantityMeasure?   @map("quantity_measure")
  price             Decimal?           @db.Decimal(9, 2)
  barcode           String
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime?          @updatedAt @map("updated_at")
  productPromotions ProductPromotion[]
  categoryId        String             @map("category_id")
  category          Category           @relation(fields: [categoryId], references: [id])
  productList       ProductList[]

  @@map("products")
}

model ProductList {
  id              String           @id @default(uuid())
  price           Decimal?         @db.Decimal(9, 2)
  quantity        Int?
  quantityMeasure QuantityMeasure? @map("quantity_measure")
  isPurchased     Boolean          @default(false) @map("is_purchased")
  product         Product          @relation(fields: [productId], references: [id])
  productId       String           @map("product_id")
  list            List             @relation(fields: [listId], references: [id])
  listId          String           @map("list_id")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")

  @@map("products_lists")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("categories")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  cep        String
  address    String
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime?   @updatedAt @map("updated_at")
  promotions Promotion[]

  @@map("stores")
}

model Promotion {
  id                String             @id @default(uuid())
  name              String
  discount          Decimal            @db.Decimal(9, 2)
  discountPercent   Int                @map("discount_percent")
  dateInitial       DateTime           @map("date_initial")
  dateEnd           DateTime           @map("date_end")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime?          @updatedAt @map("updated_at")
  productPromotions ProductPromotion[]
  storeId           String             @map("store_id")
  store             Store              @relation(fields: [storeId], references: [id])

  @@map("promotions")
}

model ProductPromotion {
  id          String    @id @default(uuid())
  productId   String    @map("product_id")
  product     Product   @relation(fields: [productId], references: [id])
  promotionId String    @map("promotion_id")
  promotion   Promotion @relation(fields: [promotionId], references: [id])

  @@map("products_promotions")
}
